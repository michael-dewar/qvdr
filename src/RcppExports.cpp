// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// read_qvd_cpp
List read_qvd_cpp(const std::string& path, bool prefer_numeric_duals, bool include_indices);
RcppExport SEXP _qvdr_read_qvd_cpp(SEXP pathSEXP, SEXP prefer_numeric_dualsSEXP, SEXP include_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type prefer_numeric_duals(prefer_numeric_dualsSEXP);
    Rcpp::traits::input_parameter< bool >::type include_indices(include_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(read_qvd_cpp(path, prefer_numeric_duals, include_indices));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qvdr_read_qvd_cpp", (DL_FUNC) &_qvdr_read_qvd_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_qvdr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
